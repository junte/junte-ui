@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';
@import 'elements/badge/badge';
@import 'elements/icon/icon';

$tab-marker-height: 4px;

@mixin jnt-link($passed: (), $context: null, $strategy: 'changes') {
  $defs: (
    corner: $jnt-corner-small,
    font-size: $jnt-font-size-base,
    font-weight: null,
    text-transform: null,
    text-decoration: null,
    text-align: null,
    padding: null,
    overflow: false,
    height: null,
    border: null,
    color: $jnt-primary-color,
    background: null,
    inverse-color: $jnt-white-color,
    hover-color: $jnt-primary-dark-color,
    focus: (
      outline: 1px solid $jnt-primary-light-color,
      outline-offset: 3px,
      shadow: null
    ),
    toggle: (
      toggle: true,
      margin-left: $jnt-gutter-small,
      color: $jnt-primary-text-color,
      open-color: $jnt-primary-text-color
    ),
    icon: (
      spacing: $jnt-gutter-tiny,
      color: null,
      size: 18px
    ),
    badge: (
      margin-left: $jnt-gutter-small,
      color: null,
      background: null
    ),
    outlines: (
      'transparent': (
        padding: 0,
        color: null,
        hover: (
          color: null,
          background-color: null,
          border-color: null
        ),
        active: (
          underline: true,
          background-color: null,
          color: null,
          underline-color: $jnt-primary-color,
          shadow: null,
          divider: (
            display: false,
            divider-width: null,
            divider-height: 100%,
            divider-corner: null,
            divider-color: null
          ),
          badge: (
            color: null,
            background: null
          )
        ),
        orphan: (
          color: $jnt-primary-text-light-color,
          hover: (
            color: $jnt-primary-text-dark-color,
            background-color: null
          )
        )
      ),
      ghost: (
        padding: $jnt-gutter-tiny $jnt-gutter-small
      ),
      fill: (
        padding: $jnt-gutter-tiny $jnt-gutter-small
      )
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-link-host)} {
    @if $declare {
      display: inline-block;
      box-sizing: border-box;
      max-width: 100%;
      &[data-disabled='true'] {
        [data-link] {
          opacity: .65;
          pointer-events: none;
          cursor: default;
        }
      }
      &[data-with-title='false'] {
        [data-link] [data-icon] {
          margin-right: 0 !important;
        }
      }
      #{$wrapper} [data-link] {
        text-decoration: none;
        box-sizing: border-box;
        cursor: pointer;
        width: 100%;
        position: relative;

        [data-title] {
          [data-icon], span {
            transition: color .2s;
          }
        }

        [data-empty] {
          width: 30px;
          height: 10px;
          background-color: $jnt-primary-text-light-color;
        }
      }

      &[data-context='text'] {
        #{$wrapper} [data-link] {
          display: inline-block;
        }
      }

      &[data-context='box'], &[data-context='menu'] {
        #{$wrapper} [data-link] {
          display: flex;
          align-items: center;
          width: 100%;

          [data-title] {
            display: flex;
            align-items: center;

            [data-icon] {
              line-height: 1;
            }
          }
        }
      }

      &[data-context='menu'][data-outline='transparent'] {
        [data-link][data-active=true], [data-link][data-orphan='false'].active {
          [data-title] span {
            border-bottom: none;
          }
          [data-line] {
            display: block !important;
          }
        }
      }
    }

    &[data-outline='transparent']:not([data-context='menu']) {
      [data-link]:focus {
        @if map-has-key($vars, focus) {
          $focus: map-get($vars, focus);
          @if map-get($focus, outline) != null {
            outline: map-get($focus, outline);
            outline-offset: map-get($focus, outline-offset);
          }
          @if map-get($focus, shadow) != null {
            outline: 0;
            box-shadow: map-get($focus, shadow);
          }
        }
      }
    }

    @if map-has-key($vars, icon) {
      $icon: map-get($vars, icon);
      &[data-position='left'] {
        [data-icon] {
          margin-right: map-get($icon, spacing);
        }
      }
      &[data-position='right'] {
        [data-icon] {
          margin-left: map-get($icon, spacing);
        }
      }
    }


    &[data-outline='#{$jnt-outline-fill-name}'] {
      #{$wrapper} [data-link] {
        color: map-get($vars, inverse-color);
        background-color: map-get($vars, color);

        [data-icon] {
          @include jnt-icon((color: map-get($vars, inverse-color)), '&');
        }

        &:hover {
          background-color: map-get($vars, hover-color);
        }

        &:focus {
          box-shadow: 0 1px 5px map-get($vars, color);
        }

        &[data-active='true'], &.active[data-orphan='false'] {
          [data-title] {
            span {
              border-bottom: 1px solid map-get($vars, inverse-color);
            }
          }
        }

        [data-badge] {
          @include jnt-badge((
            background: if(map-get($vars, inverse-color), map-get($vars, inverse-color) !important, null),
            color: if(map-get($vars, color), map-get($vars, color) !important, null)
          ), '&');
        }
      }
    }

    &[data-outline='#{$jnt-outline-ghost-name}'] {
      #{$wrapper} [data-link] {
        color: map-get($vars, color);
        background-color: transparent;
        border: 1px solid map-get($vars, color);

        [data-icon] {
          @include jnt-icon((color: map-get($vars, color)), '&');
        }

        &:hover {
          background-color: map-get($vars, color);
          color: map-get($vars, inverse-color);

          [data-icon] {
            @include jnt-icon((color: map-get($vars, inverse-color)), '&');
          }

          [data-badge] {
            @include jnt-badge((
              background: if(map-get($vars, inverse-color), map-get($vars, inverse-color) !important, null),
              color: if(map-get($vars, color), map-get($vars, color) !important, null)
            ), '&');
          }

          &[data-active='true'], &.active[data-orphan='false'] {
            [data-title] {
              span {
                border-bottom: 1px solid map-get($vars, inverse-color);
              }
            }
          }
        }

        &:focus {
          box-shadow: 0 1px 5px #{map-get($vars, color)};
        }

        &[data-active='true'], &.active[data-orphan='false'] {
          [data-title] {
            span {
              border-bottom: 1px solid map-get($vars, color);
            }
          }
        }

        [data-badge] {
          @include jnt-badge((
            background: if(map-get($vars, color), map-get($vars, color) !important, null),
            color: if(map-get($vars, inverse-color), map-get($vars, inverse-color) !important, null)
          ), '&');
        }
      }
    }

    &[data-outline='#{$jnt-outline-transparent-name}'] {
      #{$wrapper} [data-link] {
        color: map-get($vars, color);

        [data-icon] {
          @include jnt-icon((color: map-get($vars, color)), '&');
        }

        &:hover {
          color: map-get($vars, hover-color);

          [data-icon] {
            @include jnt-icon((color: map-get($vars, hover-color)), '&');
          }
        }

        &[data-active='true'] [data-title], &[data-orphan='false'].active [data-title] {
          @if map-has-key($vars, active) {
            $active: map-get($vars, active);
            span {
              @if map-get($active, underline) == true {
                border-bottom: 1px solid map-get($active, underline-color);
              }
              @if map-get($active, underline) == false {
                border: none;
              }
            }
          }
        }
      }
    }

    @if map-has-key($vars, outlines) {
      @each $outline, $map in map-get($vars, outlines) {
        &[data-outline='#{$outline}'] {
          &[data-orphan='true'] {
            @if map-has-key($map, orphan) {
              $orphan: map-get($map, orphan);
              #{$wrapper} [data-link] {
                color: map-get($orphan, color);

                [data-icon] {
                  @include jnt-icon((color: map-get($orphan, color)), '&');
                }

                &:hover {
                  @if map-has-key($orphan, hover) {
                    $hover: map-get($orphan, hover);
                    color: map-get($hover, color);
                    background-color: map-get($hover, background-color);

                    [data-icon] {
                      @include jnt-icon((color: map-get($hover, color)), '&');
                    }
                  }
                }
              }
            }
          }

          #{$wrapper} [data-link] {
            padding: map-get($map, padding);
            color: map-get($map, color);
          }

          @if map-has-key($map, hover) {
            $hover: map-get($map, hover);
            #{$wrapper} [data-link][data-active='false']:not(.active), [data-link][data-orphan='true'][data-active='false'] {
              &:hover {
                color: map-get($hover, color);
                background-color: map-get($hover, background-color);

                [data-icon] {
                  @include jnt-icon((color: map-get($hover, color)), '&');
                }
              }
            }
          }

          @if map-has-key($map, active) {
            $active: map-get($map, active);
            @if map-has-key($active, divider) {
              $divider: map-get($active, divider);
              @if map-get($divider, display) == true {
                #{$wrapper} [data-link] {
                  &:after {
                    content: '';
                    position: absolute;
                    left: 0;
                    bottom: 0;
                    width: map-get($divider, divider-width);
                    border-radius: map-get($divider, divider-corner);
                    background-color: map-get($divider, divider-color);
                    height: map-get($divider, divider-height);
                    display: none;
                  }
                }
              }
            }
            #{$wrapper} [data-link][data-active='true'], [data-link][data-orphan='false'].active {
              background-color: map-get($active, background-color);
              box-shadow: map-get($active, shadow);

              @if map-has-key($active, divider) {
                $divider: map-get($active, divider);
                @if map-get($divider, display) == true {
                  &:after {
                    display: block;
                  }
                }
              }

              [data-title] {
                color: map-get($active, color);

                [data-icon] {
                  @include jnt-icon((color: map-get($active, color)), '&');
                }

                span {
                  @if map-get($active, underline) == true {
                    border-bottom: 1px solid map-get($active, underline-color);
                  }
                  @if map-get($active, underline) == false {
                    border: none;
                  }
                }
              }
              @if map-has-key($active, badge) {
                $badge: map-get($active, badge);
                [data-badge] {
                  @include jnt-badge((
                    background: map-get($badge, background),
                    color: map-get($badge, color)
                  ), '&');
                }
              }
            }
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-link] {
    @if map-has-key($vars, toggle) {
      $toggle: map-get($vars, toggle);
      @if map-get($toggle, toggle) == false {
        [data-toggle] {
          display: none;
        }
      }
      [data-toggle] {
        margin-left: map-get($toggle, margin-left);
        margin-right: 0;
        @include jnt-icon((color: map-get($toggle, color)), '&');

        &[data-opened=true] {
          @include jnt-icon((color: map-get($toggle, open-color)), '&');
        }
      }
    }

    [data-badge][data-collapsed='true'] {
      @include jnt-badge((size: 16px, font-size: 10px, positions: (rightTop: (right: $jnt-gutter-tiny, top: $jnt-gutter-tiny, transform: none))), '&');
    }

    border-radius: map-get($vars, corner);
    padding: if(map-get($vars, padding), map-get($vars, padding) !important, null);
    height: map-get($vars, height);
    font-size: map-get($vars, font-size);
    font-weight: map-get($vars, font-weight);
    text-transform: map-get($vars, text-transform);
    text-decoration: map-get($vars, text-decoration);
    text-align: map-get($vars, text-align);
    background: map-get($vars, background);
    border: if(map-get($vars, border), map-get($vars, border) !important, null);

    [data-title] {
      @if $declare {
        margin-right: auto;
      }
      @if map-has-key($vars, icon) {
        $icon: map-get($vars, icon);
        [data-icon] {
          @include jnt-icon((
            color: map-get($icon, color),
            sizes: (
              auto: (
                size: map-get($icon, size)
              )
            )
          ), '&');

        }
      }
      @if map-get($vars, overflow) == true {
        text-overflow: ellipsis;
        overflow: hidden;
        max-width: 100%;
        white-space: nowrap;
      }
    }

    @if map-has-key($vars, badge) {
      $badge: map-get($vars, badge);
      [data-badge] {
        margin-left: map-get($badge, margin-left);
        @include jnt-badge((
          color: if(map-get($badge, color), map-get($badge, color)!important, null),
          background: if(map-get($badge, background), map-get($badge, background)!important, null)), '&');
      }
    }

    [data-line] {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: $tab-marker-height;
      border-radius: 5px;
      background-color: $jnt-primary-light-color;
      display: none;
    }
  }
}

@if $jnt-debug {
  @debug 'link compiled';
}
