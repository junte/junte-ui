@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';
@import 'jnt-utils';
@import 'elements/icon/icon';
@import 'layout/responsive/responsive';

@mixin jnt-breadcrumbs($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    padding: 0 $jnt-gutter-normal 0 $jnt-gutter-normal,
    margin: $jnt-gutter-small 0 $jnt-gutter-small 0,
    breadcrumb: (
      max-width: null,
      font-size: $jnt-font-size-small,
      color: $jnt-primary-text-light-color,
      hover: (
        color: $jnt-primary-color
      ),
      last: (
        color: $jnt-primary-text-dark-color
      ),
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-breadcrumbs-host)} {
    @if $declare {
      display: flex;
      position: relative;
    }
    padding: map-get($vars, padding);
    margin: map-get($vars, margin);

    [data-breadcrumb]:last-of-type {
      pointer-events: none;
      cursor: default;
    }

    &[data-wrap='nowrap'] {
      [data-breadcrumbs] {
        @include jnt-no-scrollbar();
        overflow: auto;
      }

      [data-right-fader] {
        display: block;
      }
    }

    @include max-for-tablet() {
      &[data-with-aside='true'] {
        @if $declare {
          min-height: $app-aside-burger-height;
          margin-top: 0;
          padding-left: calc(#{$app-aside-burger-width} + #{$jnt-gutter-normal});
        }
      }

      &[data-wrap='nowrap'] {
        [data-breadcrumbs] {
          overflow: auto;

          @include jnt-no-scrollbar();
        }

        [data-right-fader] {
          display: block;
        }
      }
    }
  }

  [data-right-fader] {
    display: none;
    position: absolute;
    background: linear-gradient(90deg, hsla(0, 0%, 92.2%, 0) 0, #ebebeb);
    height: 100%;
    width: 15%;
    top: 0;
    right: 0;
  }

  #{$context} #{$wrapper} [data-breadcrumb] {
    @if map-has-key($vars, breadcrumb) {
      $breadcrumb: map-get($vars, breadcrumb);

      @if map-has-key($breadcrumb, last) {
        $last: map-get($breadcrumb, last);
        &:last-of-type {
          a {
            color: map-get($last, color);
          }
        }
      }

      a {
        @if $declare {
          display: block;
          text-decoration: none;
          user-select: none;
          white-space: nowrap;
          text-overflow: ellipsis;
          overflow: hidden;

          &[data-disabled='true'] {
            pointer-events: none;
            cursor: default;
          }
        }

        max-width: map-get($breadcrumb, max-width);
        font-size: map-get($breadcrumb, font-size);
        color: map-get($breadcrumb, color);

        @if map-has-key($breadcrumb, hover) {
          $hover: map-get($breadcrumb, hover);
          &:hover {
            color: map-get($hover, color);
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-icon] {
    @if $declare {
      &:last-child {
        display: none;
      }
    }
    @include jnt-icon((
      color: map-get($vars, color),
      size: 8px
    ), '&');
  }
}

@if $jnt-debug {
  @debug 'breadcrumbs compiled';
}
