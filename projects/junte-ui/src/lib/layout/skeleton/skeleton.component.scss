@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';

@keyframes jnt-skeleton-loading {
  0% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0 50%;
  }
}

@mixin skeleton-size($size) {
  [data-avatar] {
    min-width: $size;
    width: $size;
    min-height: $size;
    height: $size;
  }
}

@mixin jnt-skeleton($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    background: (
      from: $jnt-secondary-background,
      to: $jnt-purple-lighten-color
    ),
    line: (
      height: 24px,
      corner: $jnt-corner-normal
    ),
    avatar: (
      width: null,
      height: null,
      sizes: (
        tiny: 24px,
        small: 40px,
        normal: 80px,
        large: 120px
      )
    ),
    card: (
      height: 70px,
      corner: $jnt-corner-normal
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-skeleton-host)} {
    @if $declare {
      display: block;
    }
    @if map-has-key($vars, avatar) {
      $avatar: map-get($vars, avatar);
      @if map-get($avatar, width) or map-get($avatar, height) {
        [data-avatar] {
          width: map-get($avatar, width);
          min-width: map-get($avatar, min-width);
          height: map-get($avatar, height);
          min-height: map-get($avatar, min-height);
        }
      } @else {
        $sizes: map-get($avatar, sizes);
        @each $size, $map in $sizes {
          &[data-size = '#{$size}'] {
            @include skeleton-size($map);
          }
        }
      }
    }

    &[data-type='text'] {
      @if $declare {
        width: 100%;
      }
    }

    &[data-animated='true'] {
      [data-line], [data-avatar], [data-card] {
        @if $declare {
          animation: jnt-skeleton-loading 1.5s ease infinite;
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-line] {
    @if map-has-key($vars, line) {
      $line: map-get($vars, line);
      min-height: map-get($line, height);
      border-radius: map-get($line, corner);
    }
    @if $declare {
      width: 100%;
    }
  }

  #{$context} #{$wrapper} [data-card] {
    @if map-has-key($vars, card) {
      $card: map-get($vars, card);
      min-height: map-get($card, height);
      border-radius: map-get($card, corner);
    }
    @if $declare {
      width: 100%;
    }
  }

  #{$context} #{$wrapper} [data-avatar='true'] {
    @if $declare {
      border-radius: 50%;
    }
  }

  #{$context} #{$wrapper} [data-line], [data-avatar], [data-card] {
    @if map-has-key($vars, background) {
      $background: map-get($vars, background);
      background: map-get($background, from) linear-gradient(90deg, map-get($background, from) 25%, map-get($background, to) 37%, map-get($background, from) 63%);
      background-size: 400% 100%;
    }
  }
}

@if $jnt-debug {
  @debug 'skeleton compiled';
}
