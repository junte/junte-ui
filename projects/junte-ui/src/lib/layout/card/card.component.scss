@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-utils';
@import 'jnt-hosts';
@import 'elements/icon/icon';
@import 'layout/responsive/responsive';
@import 'forms/button/button';
@import 'overlays/popover/popover';

@mixin card-padding($padding, $wrapper) {
  #{$wrapper} > [data-card] > [data-main] {
    padding: $padding;
  }
}

@mixin jnt-card($passed: (), $context: null, $strategy: 'changes') {
  $defs: (
    shadow: null,
    corner: $jnt-corner-normal,
    border: 1px solid $jnt-page-background,
    background: $jnt-primary-background,
    width: null,
    title: (
      padding: 0,
      margin: 0 0 $jnt-gutter-normal 0,
      color: $jnt-primary-text-color,
      text-align: left,
      font-weight: $jnt-font-weight-bold,
      font-size: $jnt-font-size-normal
    ),
    header: (
      padding: 0
    ),
    footer: (
      padding: 0
    ),
    content: (
      width: null,
      overflow: null
    ),
    picture: (
      padding: 0,
      corner: null,
      border: null
    ),
    indicator: (
      width: $jnt-gutter-small
    ),
    hover: (
      shadow: $jnt-shadow-normal
    ),
    padding: (
      tiny: $jnt-gutter-tiny,
      small: $jnt-gutter-small,
      normal: $jnt-gutter-normal,
      big: $jnt-gutter-big,
      large: $jnt-gutter-large,
      huge: $jnt-gutter-huge
    ),
    overlay: (
      background-color: rgba($jnt-primary-background, 0.75),
      icon: (
        size: 40px
      )
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-card-host)} {
    @if $declare {
      @include reset-default();
      display: inline-flex;
      position: relative;
      max-width: 100%;
      box-sizing: border-box;

      &[data-height='fluid'] {
        height: 100%;
      }

      &[data-width='fluid'] {
        @if $declare {
          display: flex;
          flex: 1;
        }
      }

      #{$wrapper} > [data-card] > [data-drag] > {
        #{'button'} {
          height: 100%;
          border: none;
          background: transparent;
          padding: 1px;

          &:not([disabled]) {
            cursor: move;
          }

          @include jnt-icon((size: 14px, color: $jnt-primary-light-color));
        }
      }
    }
    border-radius: map-get($vars, corner);
    width: map-get($vars, width);

    #{$wrapper} > [data-card] > [data-drag] > {
      #{'button'} {
        border-right: map-get($vars, border);
      }
    }

    @if map-has-key($vars, padding) {
      $padding: map-get($vars, padding);
      @each $padding, $map in $padding {
        &[data-padding = '#{$padding}'] {
          @include card-padding($map, $wrapper);
        }
      }
    }

    &[data-features*='clickable'] {
      #{$wrapper} [data-card] > [data-main] > [data-body] {
        @if $declare {
          cursor: pointer;
          &:focus {
            outline: 0;
          }
        }
      }

      &:hover {
        @if map-has-key($vars, hover) {
          $hover: map-get($vars, hover);
          #{$wrapper} [data-card] {
            box-shadow: map-get($hover, shadow);
          }
        }
      }

      #{$wrapper} [data-card][data-focused=true] {
        @if $declare {
          outline: 0;
          box-shadow: $jnt-outline-shadow-small $jnt-primary-light-color;
        }
      }
    }

    &[data-orientation='vertical'] {
      #{$wrapper} [data-card] > [data-main] > [data-body] > [data-picture] > [data-image] {
        @if $declare {
          width: 100%;
          height: auto;
        }
      }
    }

    &[data-features*='adapted'] {
      @include for-mobile() {
        #{$wrapper} [data-card] > [data-main] > [data-body] > [data-picture] > [data-image] {
          @if $declare {
            width: 100%;
            height: auto;
          }
        }
      }
    }

    &[data-has-icon='true'] {
      #{$wrapper} > [data-card] > [data-main] {
        @if $declare {
          padding-top: $jnt-gutter-big;
        }
      }
    }

    @content;
  }

  #{$context} #{$wrapper} [data-indicator],
  #{$context} #{$wrapper} [data-action] {
    @if $declare {
      position: absolute;
      top: -12px;
      right: 0;
      z-index: 2;
      @include jnt-icon((
        size: 16px,
        color: $jnt-primary-light-color
      ), '&');
    }
  }

  #{$context} #{$wrapper} [data-indicator] {
    @if $declare {
      width: 32px;
      height: 32px;
      background-color: $jnt-secondary-background;
      border-radius: $jnt-corner-normal;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    border: 2px solid map-get($vars, background);
  }

  #{$context} #{$wrapper} [data-action] {
    @include button-default();
    background-color: $jnt-secondary-background;
    border-radius: $jnt-corner-normal;
    border: if(map-get($vars, background), 2px solid map-get($vars, background), null);
    height: 36px;
    padding: 0 $jnt-gutter-small;
  }

  #{$context} #{$wrapper} [data-card] {
    border-radius: map-get($vars, corner);
    border: map-get($vars, border);
    background-color: map-get($vars, background);
    box-shadow: map-get($vars, shadow);
    @if $declare {
      overflow: hidden;
      flex: 1;
    }

    > [data-line] {
      @if $declare {
        width: $jnt-gutter-small;
      }
    }

    > [data-main] {
      @if $declare {
        flex: 1;
        max-width: 100%;
        box-sizing: border-box;
      }

      > [data-header] {
        @if map-has-key($vars, header) {
          $header: map-get($vars, header);
          padding: map-get($header, padding);
        }
      }

      > [data-body] {
        @if $declare {
          flex: 1;
        }

        > [data-content] {
          @if $declare {
            flex: 1;
          }
          @if map-has-key($vars, content) {
            $content: map-get($vars, content);
            max-width: map-get($content, width);
            overflow: map-get($content, overflow);
          }

          > [data-title] {
            @if map-has-key($vars, title) {
              $title: map-get($vars, title);
              padding: map-get($title, padding);
              margin: map-get($title, margin);
              > [data-text] {
                text-align: map-get($title, text-align);
                font-weight: map-get($title, font-weight);
                color: map-get($title, color);
                font-size: map-get($title, font-size);
              }
            }
          }
        }

        > [data-picture] {
          @if map-has-key($vars, picture) {
            $picture: map-get($vars, picture);
            padding: map-get($picture, padding);
            img {
              @if $declare {
                display: block;
              }
              border-radius: map-get($picture, corner);
              border: map-get($picture, border);
            }
          }
        }
      }

      > [data-footer] {
        @if map-has-key($vars, footer) {
          $footer: map-get($vars, footer);
          padding: map-get($footer, padding);
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-load],
  #{$context} #{$wrapper} [data-error] {
    @if $declare {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: $jnt-corner-normal;
      z-index: 1;
    }
    @if map-has-key($vars, overlay) {
      $overlay: map-get($vars, overlay);
      background-color: map-get($overlay, background-color);
      @if map-has-key($overlay, icon) {
        $icon: map-get($overlay, icon);
        [data-icon] {
          @include jnt-icon((
            size: map-get($icon, size)
          ), '&');
        }
      }
    }
  }
}

@if $jnt-debug {
  @debug 'card compiled';
}
