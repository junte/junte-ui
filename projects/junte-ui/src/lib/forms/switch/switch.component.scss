@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';
@import 'elements/icon/icon';

@mixin jnt-switch($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    corner: 35px,
    padding: 2px,
    background: (
      on: $jnt-primary-color,
      off: $jnt-gray-600-color,
      slider: (
        on: $jnt-white-color,
        off: $jnt-white-color
      ),
      icon: (
        on: $jnt-primary-color,
        off: $jnt-gray-600-color
      )
    ),
    hover: (
      on: null,
      off: null
    ),
    focus: (
      shadow: $jnt-outline-shadow-normal $jnt-highlight-background
    ),
    disabled: (
      on: rgba($jnt-primary-color, .5),
      off: rgba($jnt-gray-600-color, .5)
    ),
    sizes: (
      tiny: (
        width: 38px,
        height: 20px,
        tag: (
          font-size: 8px
        ),
        label: (
          font-size: 10px
        ),
        icon: (
          size: 11px
        )
      ),
      small: (
        width: 45px,
        height: 24px,
        tag: (
          font-size: 10px
        ),
        label: (
          font-size: 12px
        ),
        icon: (
          size: 12px
        )
      ),
      normal: (
        width: 57px,
        height: 28px,
        tag: (
          font-size: 12px
        ),
        label: (
          font-size: 14px
        ),
        icon: (
          size: 16px
        )
      ),
      large: (
        width: 70px,
        height: 36px,
        tag: (
          font-size: 14px
        ),
        label: (
          font-size: 16px
        ),
        icon: (
          size: 18px
        )
      )
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-switch-host)} {
    @if $declare {
      display: inline-flex;
      align-items: center;
    }
    @if map-has-key($vars, sizes) {
      $sizes: map-get($vars, sizes);
      @each $size, $map in $sizes {
        &[data-size = '#{$size}'] {
          #{$wrapper} form {
            min-width: map-get($map, width);
            width: map-get($map, width);

            [data-switch] {
              min-width: ceil(map-get($map, width) + (map-get($map, width) - (map-get($map, height) - map-get($vars, padding)) - $jnt-gutter-tiny / 2));
              height: map-get($map, height);
              transform: translateX(ceil((map-get($map, width) - (map-get($map, height) - map-get($vars, padding)) - $jnt-gutter-tiny / 2) * (-1)));

              [data-on], [data-off] {
                width: calc(#{map-get($map, width)} - #{map-get($vars, padding)} -
                (#{map-get($map, height)} - #{map-get($vars, padding)} * 2) -
                #{map-get($vars, padding)} * 2);
              }

              [data-slider] {
                width: calc(#{map-get($map, height)} - #{map-get($vars, padding)} * 2);
                height: calc(#{map-get($map, height)} - #{map-get($vars, padding)} * 2);
              }

              [data-icon] {
                @if map-has-key($map, icon) {
                  $icon: map-get($map, icon);
                  @include jnt-icon((
                    size: map-get($icon, size)
                  ), '&');
                }
              }

              @if map-has-key($map, tag) {
                $label: map-get($map, tag);
                span {
                  font-size: map-get($label, font-size);
                }
              }
            }

            input:checked + [data-switch] {
              transform: translateX(0);
            }
          }

          @if map-has-key($map, label) {
            $label: map-get($map, label);
            #{$wrapper} label {
              font-size: map-get($label, font-size);
            }
          }
        }
      }
    }

    &[data-focused='true'] {
      #{$wrapper} [data-form] {
        outline: 0;
        @if map-has-key($vars, focus) {
          $focus: map-get($vars, focus);
          box-shadow: map-get($focus, shadow);
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-wrapper] {
    flex: 1;

    [data-form] {
      border-radius: map-get($vars, corner);
      line-height: 1;

      form {
        @if $declare {
          display: inline-flex;
          align-items: center;
          position: relative;
          // for Safari
          -webkit-mask-image: -webkit-radial-gradient(circle, white 100%, black 100%);
        }
        border-radius: map-get($vars, corner);

        input {
          @if $declare {
            position: absolute;
            top: 0;
            z-index: 1;
            cursor: pointer;
            opacity: 0;
            bottom: 0;
            right: 0;
            left: 0;
            margin: 0;
            width: 100%;
            height: 100%;
          }

          &:checked {
            & + [data-switch] {
              @if map-has-key($vars, background) {
                $background: map-get($vars, background);
                background-color: map-get($background, on);
                [data-slider] {
                  @if map-has-key($background, slider) {
                    $slider: map-get($background, slider);
                    background-color: map-get($slider, on);
                  }
                }
                [data-icon] {
                  @if map-has-key($background, icon) {
                    $icon-bg: map-get($background, icon);
                    @include jnt-icon((
                      color: map-get($icon-bg, on)
                    ), '&');
                  }
                }
              }
            }
          }

          &:hover {
            @if map-has-key($vars, hover) {
              $hover: map-get($vars, hover);
              & + [data-switch] {
                background-color: map-get($hover, off);
              }
              &:checked {
                & + [data-switch] {
                  background-color: map-get($hover, on);
                }
              }
            }
          }

          &:disabled {
            @if $declare {
              cursor: default;
            }
            @if map-has-key($vars, disabled) {
              $disabled: map-get($vars, disabled);
              & + [data-switch] {
                background-color: map-get($disabled, off);
              }
              &:checked {
                & + [data-switch] {
                  background-color: map-get($disabled, on);
                }
              }
            }
          }
        }

        [data-switch] {
          @if $declare {
            display: flex;
          }
          @if map-has-key($vars, background) {
            $background: map-get($vars, background);
            background-color: map-get($background, off);
            [data-on] {
              @if $declare {
                box-sizing: border-box;
                text-align: right;
              }
              padding-left: calc(#{map-get($vars, padding)} * 2);
            }
            [data-off] {
              @if $declare {
                box-sizing: border-box;
                text-align: left;
              }
              padding-right: calc(#{map-get($vars, padding)} * 2);
            }
            [data-slider] {
              @if map-has-key($background, slider) {
                $slider: map-get($background, slider);
                background-color: map-get($slider, off);
              }
            }
            [data-icon] {
              @if map-has-key($background, icon) {
                $icon-bg: map-get($background, icon);
                @include jnt-icon((
                  color: map-get($icon-bg, off)
                ), '&');
              }
            }
          }
          @if $declare {
            transition: transform .4s ease-out, background-color .4s;
          }

          [data-slider] {
            @if $declare {
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
            }
          }

          span {
            @if $declare {
              color: $jnt-white-color;
            }
          }
        }
      }
    }

    label {
      @if $declare {
        margin-left: $jnt-gutter-small;
        flex: 1;
      }
    }
  }


}

@if $jnt-debug {
  @debug 'switch compiled';
}
