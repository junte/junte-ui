@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';
@import 'elements/icon/icon';

@mixin radio-size($size, $wrapper) {
  #{$wrapper} [data-switch] {
    min-width: map-get($size, indicator);
    width: map-get($size, indicator);
    min-height: map-get($size, indicator);
    height: map-get($size, indicator);
  }
  #{$wrapper} [data-indicator] {
    width: map-get($size, icon);
    height: map-get($size, icon);
  }
  #{$wrapper} input {
    &[custom='true'] {
      width: map-get($size, indicator);
    }
  }
  #{$wrapper} [data-label] {
    font-size: map-get($size, font-size);
  }
}

@mixin jnt-radio($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    sizes: (
      tiny: (
        indicator: 12px,
        icon: 4px,
        font-size: 10px
      ),
      small: (
        indicator: 14px,
        icon: 6px,
        font-size: 11px
      ),
      normal: (
        indicator: 18px,
        icon: 10px,
        font-size: 14px
      ),
      large: (
        indicator: 24px,
        icon: 14px,
        font-size: 16px
      )
    ),
    switch: (
      background-color: $jnt-control-background,
      border-color: $jnt-control-border-color,
      checked: (
        border-color: $jnt-primary-color
      ),
      disabled: (
        background-color: $jnt-control-disabled-background,
        border-color: $jnt-control-disabled-border-color
      ),
      focus: (
        shadow: $jnt-outline-shadow-normal $jnt-highlight-background
      ),
      hover: (
        border-color: $jnt-primary-color
      )
    ),
    indicator: (
      background-color: $jnt-primary-color,
      disabled: (
        background-color: $jnt-control-disabled-indicator-icon-color
      )
    ),
    label: (
      gutter: $jnt-control-gutter,
      color: $jnt-control-switch-label-color,
      overflow: false,
      disabled: (
        color: $jnt-control-disabled-label-color
      )
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-radio-host)} {
    @if $declare {
      display: flex;
      align-items: center;
      position: relative;
    }

    @if map-has-key($vars, sizes) {
      $sizes: map-get($vars, sizes);
      @each $size, $map in $sizes {
        &[data-size = '#{$size}'] {
          @include radio-size($map, $wrapper);
        }
      }
    }

    &[data-checked='true'] {
      #{$wrapper} [data-switch] {
        @if map-has-key($vars, switch) {
          $switch: map-get($vars, switch);
          @if map-has-key($switch, checked) {
            $checked: map-get($switch, checked);
            border-color: map-get($checked, border-color);
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} input {
    @if $declare {
      position: absolute;
      top: 0;
      z-index: 1;
      cursor: pointer;
      opacity: 0;
      bottom: 0;
      right: 0;
      left: 0;
      margin: 0;
      width: 100%;
      height: 100%;
    }

    &:disabled {
      @if $declare {
        cursor: default;
        pointer-events: none;
      }

      @if map-has-key($vars, switch) {
        $switch: map-get($vars, switch);
        @if map-has-key($switch, disabled) {
          $disabled: map-get($switch, disabled);
          & + [data-switch] {
            background-color: map-get($disabled, background-color);
            border-color: map-get($disabled, border-color);
          }
        }
      }

      & ~ label {
        @if map-has-key($vars, label) {
          $label: map-get($vars, label);
          @if map-has-key($label, disabled) {
            $disabled: map-get($label, disabled);
            color: map-get($disabled, color);
          }
        }
      }

      & + [data-switch] {
        @if map-has-key($vars, indicator) {
          $indicator: map-get($vars, indicator);
          @if map-has-key($indicator, disabled) {
            $disabled: map-get($indicator, disabled);
            > [data-indicator] {
              background-color: map-get($disabled, background-color);
            }
          }
        }
      }
    }

    &:focus {
      & + [data-switch] {
        @if map-has-key($vars, switch) {
          $switch: map-get($vars, switch);
          @if map-has-key($switch, focus) {
            $focus: map-get($switch, focus);
            box-shadow: map-get($focus, shadow);
          }
        }
      }
    }

    &:hover {
      & + [data-switch] {
        @if map-has-key($vars, switch) {
          $switch: map-get($vars, switch);
          @if map-has-key($switch, hover) {
            $hover: map-get($switch, hover);
            border-color: map-get($hover, border-color);
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-switch] {
    @if $declare {
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      box-sizing: border-box;
      text-align: center;
      border-radius: 50%;
      transition: all .3s;
    }

    @if map-has-key($vars, switch) {
      $switch: map-get($vars, switch);
      background-color: map-get($switch, background-color);
      border: if(map-get($switch, border-color), 1px solid map-get($switch, border-color), null);
    }

    [data-indicator] {
      @if $declare {
        display: inline-block;
        transform-origin: center;
        transition: all .3s;
        border-radius: 50%;
        @if map-has-key($vars, indicator) {
          $indicator: map-get($vars, indicator);
          background-color: map-get($indicator, background-color);
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-label] {
    @if $declare {
      user-select: none;
      white-space: nowrap;
      flex: 1;
    }
    @if map-has-key($vars, label) {
      $label: map-get($vars, label);
      padding-left: map-get($label, gutter);
      color: map-get($label, color);
      @if map-get($label, overflow) == true {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
      }
    }
  }
}

@if $jnt-debug {
  @debug 'radio compiled';
}
