@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';
@import 'elements/badge/badge';
@import 'elements/icon/icon';
@import 'layout/spinner/spinner';

@mixin button-fill($scheme, $wrapper) {
  #{$wrapper} button {
    color: map-get($scheme, inverse-color);
    background-color: map-get($scheme, color);

    [data-loading] {
      @include jnt-spinner((
        color: $jnt-white-color
      ), '&');
    }

    [data-icon] {
      @include jnt-icon((color: map-get($scheme, inverse-color)), '&');
    }

    &:hover {
      background-color: map-get($scheme, hover-color);
    }

    @if map-has-key($scheme, focus) {
      $focus: map-get($scheme, focus);

      &:focus {
        box-shadow: map-get($focus, shadow);
      }
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
        color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
      ), '&');
    }
  }
}

@mixin button-ghost($scheme, $wrapper) {

  #{$wrapper} button {
    color: map-get($scheme, color);
    background-color: transparent;
    border: 1px solid map-get($scheme, color);

    [data-loading] {
      @include jnt-spinner((
        color: map-get($scheme, color)
      ), '&');
    }

    [data-icon] {
      @include jnt-icon((color: map-get($scheme, color)), '&');
    }

    &:hover {
      background-color: map-get($scheme, color);
      color: map-get($scheme, inverse-color);

      [data-icon] {
        @include jnt-icon((color: map-get($scheme, inverse-color)), '&');
      }

      [data-badge] {
        @include jnt-badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }

    @if map-has-key($scheme, focus) {
      $focus: map-get($scheme, focus);

      &:focus {
        box-shadow: map-get($focus, shadow);
      }
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
      ), '&');
    }
  }
}

@mixin button-transparent($scheme, $wrapper) {

  &[data-shape='circle'] {
    #{$wrapper} button {
      &:focus {
        @if map-has-key($scheme, focus) {
          $focus: map-get($scheme, focus);
          outline: 0;
          box-shadow: map-get($focus, shadow);
        }
      }
    }
  }

  #{$wrapper} button {
    color: map-get($scheme, color);
    background-color: transparent;
    border-color: transparent;

    [data-loading] {
      @include jnt-spinner((
        color: map-get($scheme, color)
      ), '&');
    }

    [data-icon] {
      @include jnt-icon((color: map-get($scheme, color)), '&');
    }

    &:hover {
      color: map-get($scheme, hover-color);
    }

    &:focus {
      outline-offset: 1px;
      outline: map-get($scheme, color) auto 1px;
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
      ), '&');
    }
  }
}

@mixin button-size($size, $wrapper) {
  #{$wrapper} button {
    padding: map-get($size, padding);
    height: map-get($size, height);
    font-size: map-get($size, font-size);
  }
  &[data-with-text='false'] {
    #{$wrapper} button {
      padding: map-get($size, padding-without-text);
    }

    &[data-shape='circle'] {
      #{$wrapper} button {
        @if map-has-key($size, icon) {
          $icon: map-get($size, icon);
          padding: 0 #{calc((#{map-get($size, height)} - #{map-get($icon, size)}) / 2)};
        }
      }

      &[data-outline='ghost'] {
        #{$wrapper} button {
          @if map-has-key($size, icon) {
            $icon: map-get($size, icon);
            padding: 0 #{calc((#{map-get($size, height)} - #{map-get($icon, size)}) / 2 - 1px)};
          }
        }
      }
    }
  }
  &[data-outline='transparent'] {
    &[data-shape='square'] {
      #{$wrapper} button {
        padding-left: $jnt-gutter-small;
        padding-right: $jnt-gutter-small;
        border-radius: 0;
      }
    }
  }
}

@mixin jnt-button($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    corner: $jnt-corner-large,
    border: null,
    background: null,
    hover-background: null,
    color: null,
    hover-color: null,
    shadow: null,
    corners: (
      top: (
        left: null,
        right: null
      ),
      bottom: (
        left: null,
        right: null
      )
    ),
    borders: (
      right: null,
      left: null,
      top: null,
      bottom: null
    ),
    without-text-corner: $jnt-corner-small,
    text-transform: null,
    padding: null,
    font-weight: $jnt-font-weight-base,
    disabled: (
      opacity: .65
    ),
    icon: (
      margin: $jnt-gutter-small,
      size: 18px
    ),
    schemes: (
      primary: (
        color: $jnt-primary-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-primary-dark-color,
        focus: (
          shadow: 0 1px 5px $jnt-primary-color
        )
      ),
      secondary: (
        color: $jnt-secondary-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-secondary-dark-color,
        focus: (
          shadow: 0 1px 5px $jnt-secondary-color
        )
      ),
      success: (
        color: $jnt-success-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-success-dark-color,
        focus: (
          shadow: 0 1px 5px $jnt-success-color
        )
      ),
      fail: (
        color: $jnt-fail-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-fail-dark-color,
        focus: (
          shadow: 0 1px 5px $jnt-fail-color
        )
      ),
      accent: (
        color: $jnt-accent-color,
        inverse-color: $jnt-white-color,
        hover-color: darken($jnt-accent-color, 5%),
        focus: (
          shadow: 0 1px 5px $jnt-accent-color
        )
      ),
    ),
    sizes: (
      tiny: (
        padding: 0 $jnt-gutter-normal,
        padding-without-text: 0 $jnt-gutter-tiny,
        font-size: 12px,
        height: 24px,
        badge: (
          size: 20px
        ),
        icon: (
          size: 16px,
          stroke: 1.5px
        ),
        spinner: (
          size: 8px
        )
      ),
      small: (
        padding: 0 $jnt-gutter-normal,
        padding-without-text: 0 $jnt-gutter-small,
        font-size: 14px,
        height: 32px,
        badge: (
          size: 24px
        ),
        icon: (
          size: 16px,
          stroke: 1.5px
        ),
        spinner: (
          size: 12px
        )
      ),
      normal: (
        padding: 0 $jnt-gutter-big,
        padding-without-text: 0 $jnt-gutter-small,
        font-size: 14px,
        height: 40px,
        badge: (
          size: 24px
        ),
        icon: (
          size: 24px,
          stroke: 1.5px
        ),
        spinner: (
          size: 16px
        )
      ),
      large: (
        padding: 0 $jnt-gutter-large,
        padding-without-text: 0 12px,
        font-size: 14px,
        height: 48px,
        badge: (
          size: 24px
        ),
        icon: (
          size: 24px,
          stroke: 1.5px
        ),
        spinner: (
          size: 18px
        )
      )
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-button-host)} {
    @if $declare {
      display: inline-flex;
      align-items: center;
      position: relative;
      max-width: 100%;
      #{$wrapper} button {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: color .15s ease-in-out,
        background-color .15s ease-in-out,
        border-color .15s ease-in-out,
        box-shadow .15s ease-in-out;
        outline: 0;
        user-select: none;
        box-sizing: border-box;
        cursor: pointer;
        border: none;
        width: 100%;
        position: relative;
        font-family: inherit;
        line-height: $jnt-line-height-base;
        overflow: hidden;

        [data-text] {
          line-height: 1em;
          white-space: nowrap;
        }

        [data-loading] {
          position: absolute;
        }
      }
      &[data-loading='true'] {
        #{$wrapper} button {
          cursor: default;
        }
      }
      &[data-width='fluid'] {
        &[data-shape='square'] {
          display: flex;
          flex: 1;
        }
      }
      &[data-shape='circle'][data-with-text='false'] {
        #{$wrapper} button {
          border-radius: 50%;
        }
      }
    }

    &[data-disabled='true'] {
      @if map-has-key($vars, disabled) {
        $disabled: map-get($vars, disabled);
        opacity: map-get($disabled, opacity);
      }
      @if $declare {
        pointer-events: none;
      }

      #{$wrapper} button {
        @if $declare {
          cursor: default;
        }
      }
    }

    @if map-has-key($vars, schemes) {
      @each $scheme, $map in map-get($vars, schemes) {
        &[data-scheme='#{$scheme}'] {
          &[data-outline='#{$jnt-outline-fill-name}'] {
            @include button-fill($map, $wrapper);
          }

          &[data-outline='#{$jnt-outline-ghost-name}'] {
            @include button-ghost($map, $wrapper);
          }

          &[data-outline='#{$jnt-outline-transparent-name}'] {
            @include button-transparent($map, $wrapper);
          }
        }
      }
    }

    &[data-scheme][data-outline] {
      @if map-get($vars, background) {
        #{$wrapper} button {
          background: map-get($vars, background);
        }
      }
      @if map-get($vars, hover-background) {
        #{$wrapper} button:hover {
          background: map-get($vars, hover-background);
        }
      }
      @if map-get($vars, color) {
        #{$wrapper} button {
          color: map-get($vars, color);

          [data-icon] {
            @include jnt-icon((color: map-get($vars, color)), '&');
          }
        }
      }

      @if map-get($vars, hover-color) {
        #{$wrapper} button:hover {
          color: map-get($vars, hover-color);

          [data-icon] {
            @include jnt-icon((color: map-get($vars, hover-color)), '&');
          }
        }
      }
    }

    &[data-scheme][data-outline=#{$jnt-outline-transparent-name}] {
      @if map-get($vars, color) {
        #{$wrapper} button:focus {
          outline: map-get($vars, color) auto 1px;
        }

        &[data-shape='circle'] {
          #{$wrapper} button:focus {
            box-shadow: 0 1px 5px map-get($vars, color);
          }
        }
      }
    }

    @if map-has-key($vars, sizes) {
      @each $size, $map in map-get($vars, sizes) {
        &[data-size='#{$size}'] {
          @include button-size($map, $wrapper);
          @if map-has-key($map, badge) {
            $badge: map-get($map, badge);
            #{$wrapper} [data-badge] {
              @include jnt-badge((
                size: map-get($badge, size)
              ), '&');
            }
          }
          @if map-has-key($map, spinner) {
            $spinner: map-get($map, spinner);
            #{$wrapper} [data-loading] {
              @include jnt-spinner((size: map-get($spinner, size)), '&');
            }
          }
          @if map-has-key($map, icon) {
            $icon: map-get($map, icon);
            #{$wrapper} [data-icon] {
              @include jnt-icon((
                size: map-get($icon, size),
                stroke: map-get($icon, stroke)
              ), '&');
            }
          }
        }
      }
    }

    &[data-with-text='false'] {
      #{$wrapper} button {
        border-radius: map-get($vars, without-text-corner);
        @if map-has-key($vars, corners) {
          $corners: map-get($vars, corners);
          @if map-has-key($corners, top) {
            $top: map-get($corners, top);
            border-top-left-radius: map-get($top, left);
            border-top-right-radius: map-get($top, right);

          }
          @if map-has-key($corners, bottom) {
            $bottom: map-get($corners, bottom);
            border-bottom-right-radius: map-get($bottom, right);
            border-bottom-left-radius: map-get($bottom, left);
          }
        }

        [data-icon] {
          line-height: 1;
        }
      }
    }
  }

  #{$context} #{$wrapper} button {
    border-radius: map-get($vars, corner);
    border: map-get($vars, border);
    box-shadow: map-get($vars, shadow);
    text-transform: map-get($vars, text-transform);
    font-weight: map-get($vars, font-weight);
    @if map-has-key($vars, icon) {
      $icon: map-get($vars, icon);
      #{$wrapper} [data-icon] {
        @include jnt-icon((
          size: map-get($icon, size)
        ), '&');
      }
    }
    @if map-get($vars, padding) != null {
      padding: if(map-get($vars, padding), map-get($vars, padding) !important, null);
    }
    @if map-has-key($vars, corners) {
      $corners: map-get($vars, corners);
      @if map-has-key($corners, top) {
        $top: map-get($corners, top);
        border-top-left-radius: map-get($top, left);
        border-top-right-radius: map-get($top, right);
      }
      @if map-has-key($corners, bottom) {
        $bottom: map-get($corners, bottom);
        border-bottom-right-radius: map-get($bottom, right);
        border-bottom-left-radius: map-get($bottom, left);

      }
    }
    @if map-has-key($vars, borders) {
      $borders: map-get($vars, borders);
      border-right: if(map-get($borders, right), map-get($borders, right) !important, null);
      border-left: if(map-get($borders, left), map-get($borders, left) !important, null);
      border-top: if(map-get($borders, top), map-get($borders, top) !important, null);
      border-bottom: if(map-get($borders, bottom), map-get($borders, bottom) !important, null);
    }

    [data-empty] {
      @if $declare {
        width: 50px;
        height: 10px;
        background-color: $jnt-primary-text-light-color;
      }
    }
  }
}

@if $jnt-debug {
  @debug 'button compiled';
}
